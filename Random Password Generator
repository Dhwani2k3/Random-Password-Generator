import tkinter as tk
from tkinter import messagebox
import random
import string
import pyperclip  # You need to install pyperclip for clipboard functionality
import re  # For password strength checks


class PasswordGeneratorApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Random Password Generator")

        # Load background image
        self.background_image = tk.PhotoImage(
            file="G:/STUDY/COLLEGE/MCA/python/Programs/github/Pythoncode/classCodes/dhwanipassword.png")  # Ensure this path is correct

        # Create a canvas and set the background image
        self.canvas = tk.Canvas(root, width=600, height=500)
        self.canvas.pack(fill="both", expand=True)
        self.canvas.create_image(0, 0, anchor="nw", image=self.background_image)

        # Define variables
        self.password_length = tk.IntVar(value=8)
        self.include_lowercase = tk.BooleanVar(value=False)  # Initially unchecked
        self.include_uppercase = tk.BooleanVar(value=False)  # Initially unchecked
        self.include_numbers = tk.BooleanVar(value=False)  # Initially unchecked
        self.include_special = tk.BooleanVar(value=False)  # Initially unchecked

        self.saved_passwords = []
        self.saved_password_buttons = []  # To keep track of remove buttons
        self.saved_password_labels = []  # To keep track of password text
        self.show_saved = False  # Track whether saved passwords are being shown or not

        self.create_widgets()

    def create_widgets(self):
        # Password Generation Section
        self.canvas.create_text(20, 20, anchor="nw", text="Password Length:", fill="white")
        self.length_spinbox = tk.Spinbox(self.root, from_=4, to_=32, textvariable=self.password_length)
        self.canvas.create_window(190, 28, window=self.length_spinbox)

        # Custom checkboxes
        self.lowercase_checkbox = self.create_custom_checkbox(20, 60, "Include Lowercase:", self.include_lowercase)
        self.uppercase_checkbox = self.create_custom_checkbox(20, 100, "Include Uppercase:", self.include_uppercase)
        self.numbers_checkbox = self.create_custom_checkbox(20, 140, "Include Numbers:", self.include_numbers)
        self.special_checkbox = self.create_custom_checkbox(20, 180, "Include Special Characters:", self.include_special)

        # Entry for password display (initially hidden)
        self.password_display = tk.Entry(self.root, width=50)
        self.password_display_window = self.canvas.create_window(170, 220, window=self.password_display)
        self.canvas.itemconfig(self.password_display_window, state='hidden')  # Hide it initially

        # Buttons
        generate_button = tk.Button(self.root, text="Generate Password", command=self.generate_password)
        self.more_options_button = tk.Button(self.root, text="More Options", command=self.toggle_more_options)

        self.canvas.create_window(90, 260, window=generate_button)
        self.canvas.create_window(200, 260, window=self.more_options_button)

        # Create More Options buttons directly on canvas (initially hidden)
        self.save_button = tk.Button(self.root, text="Save Password", command=self.save_password)
        self.copy_button = tk.Button(self.root, text="Copy to Clipboard", command=self.copy_to_clipboard)
        self.show_button = tk.Button(self.root, text="Show Saved Passwords", command=self.toggle_show_saved_passwords)

        # Pack the buttons just below the primary buttons but hide them initially
        self.save_button_window = self.canvas.create_window(90, 300, window=self.save_button)
        self.copy_button_window = self.canvas.create_window(200, 300, window=self.copy_button)
        self.show_button_window = self.canvas.create_window(350, 300, window=self.show_button)

        self.canvas.itemconfig(self.save_button_window, state='hidden')
        self.canvas.itemconfig(self.copy_button_window, state='hidden')
        self.canvas.itemconfig(self.show_button_window, state='hidden')

        # Initially hide the saved passwords display
        self.saved_passwords_text_id = []  # This will store all saved password label IDs
        self.canvas.itemconfig(self.saved_passwords_text_id, state='hidden')

        # Strength check section (adjusted width and margin)
        self.canvas.create_text(20, 340, anchor="nw", text="Strength Check:", fill="white")

        # User password input field for strength check (reduced width)
        self.user_password_entry = tk.Entry(self.root, width=20)
        self.user_password_window = self.canvas.create_window(170, 347, window=self.user_password_entry)

        # Strength meter (reduced width)
        self.strength_meter = self.canvas.create_rectangle(250, 338, 370, 357, outline="black", fill="red")

        # Bind the strength check function to password input change
        self.user_password_entry.bind("<KeyRelease>", self.check_strength)

        # Add a margin for displaying saved passwords
        self.saved_passwords_margin_y = 450  # This value adds some space below the strength check

    def create_custom_checkbox(self, x, y, text, variable):
        """Create a custom checkbox using canvas."""
        # Draw the checkbox rectangle (white background)
        checkbox_id = self.canvas.create_rectangle(x + 179, y - 3, x + 200, y + 17,
                                                   outline="black", fill="white")

        # Draw the label text
        label_id = self.canvas.create_text(x + 20, y, anchor="nw", text=text, fill="white")

        # Store the tick mark ID (if any) for later removal
        tick_id = None

        # Bind click event to toggle the checkbox state
        def toggle():
            nonlocal tick_id  # Reference the tick_id variable

            if variable.get():
                variable.set(False)  # Uncheck
                self.canvas.itemconfig(checkbox_id, fill="white")  # Unchecked state

                # Remove the tick mark if it exists
                if tick_id:
                    self.canvas.delete(tick_id)
                    tick_id = None  # Reset tick_id

            else:
                variable.set(True)  # Check
                self.canvas.itemconfig(checkbox_id, fill="lightgreen")  # Checked state

                # Draw a green tick mark inside the checkbox
                x1 = x + 155  # X coordinate for tick mark start
                y1 = y - 5  # Y coordinate for tick mark start (top left)
                x2 = x + 165  # X coordinate for tick mark end (bottom right)
                y2 = y + 5  # Y coordinate for tick mark end (bottom right)

                # Create a line representing a checkmark (tick) inside the checkbox
                tick_id = self.canvas.create_line(x1 + 5, y1 + 5,
                                                  x2 - 5, y2 - 5,
                                                  fill='green', width=2)

        # Bind left mouse click to toggle function
        self.canvas.tag_bind(checkbox_id, "<Button-1>", lambda e: toggle())

        return checkbox_id

    def check_strength(self, event=None):
        """Check the strength of the password entered by the user."""
        password = self.user_password_entry.get()

        # Check password strength criteria
        if len(password) < 6:
            strength = "Weak"
            color = "red"
        elif re.search(r"[a-z]", password) and re.search(r"[A-Z]", password) and re.search(r"\d", password):
            strength = "Strong"
            color = "green"
        else:
            strength = "Medium"
            color = "yellow"

        # Update the strength meter color based on password strength
        self.canvas.itemconfig(self.strength_meter, fill=color)

    def generate_password(self):
        length = self.password_length.get()
        characters = ""

        if self.include_lowercase.get():
            characters += string.ascii_lowercase
        if self.include_uppercase.get():
            characters += string.ascii_uppercase
        if self.include_numbers.get():
            characters += string.digits
        if self.include_special.get():
            characters += string.punctuation

        if not characters:
            messagebox.showwarning("Warning", "Please select at least one character type")
            return

        password = ''.join(random.choice(characters) for _ in range(length))
        self.password_display.delete(0, tk.END)
        self.password_display.insert(0, password)

        # Display the password entry field after password is generated
        self.canvas.itemconfig(self.password_display_window, state='normal')  # Show it

    def save_password(self):
        password = self.password_display.get()

        if password:
            self.saved_passwords.append(password)
            messagebox.showinfo("Info", "Password saved successfully")

            # Only refresh saved passwords if they're visible
            if self.show_saved:
                self.refresh_saved_passwords()

    def copy_to_clipboard(self):
        password = self.password_display.get()
        if password:
            pyperclip.copy(password)  # Copy the password to the clipboard
            messagebox.showinfo("Info", "Password copied to clipboard")

    def refresh_saved_passwords(self):
        """Refresh the saved passwords display."""
        # Clear existing labels and buttons
        for label in self.saved_password_labels:
            self.canvas.delete(label)
        for button in self.saved_password_buttons:
            self.canvas.delete(button)

        # Remove "No Data Available" message if it exists
        for item in self.canvas.find_all():
            # Check if the item is a text item (we check for its type)
            if self.canvas.type(item) == 'text' and "No Data Available" in self.canvas.itemcget(item, "text"):
                self.canvas.delete(item)

        # Check if there are any saved passwords
        if self.saved_passwords:
            # Create new labels and remove buttons if there are saved passwords
            y_offset = self.saved_passwords_margin_y  # Starting Y position (with margin)
            self.saved_password_labels.clear()
            self.saved_password_buttons.clear()

            for i, password in enumerate(self.saved_passwords):
                # Create password label
                label = self.canvas.create_text(50, y_offset + (i * 30), text=password, fill="black",
                                                font=('Helvetica', 10))
                self.saved_password_labels.append(label)

                # Create remove button
                remove_button = tk.Button(self.root, text="Remove", command=lambda i=i: self.remove_password(i))
                remove_button_window = self.canvas.create_window(400, y_offset + (i * 30), window=remove_button)
                self.saved_password_buttons.append(remove_button_window)
        else:
            # Display a "No Data Available" message if no passwords are saved
            self.canvas.create_text(130, self.saved_passwords_margin_y, text="No Data Available", fill="black",
                                    font=('Helvetica', 12, 'italic'))

    def remove_password(self, index):
        """Remove a saved password."""
        del self.saved_passwords[index]
        self.refresh_saved_passwords()

    def toggle_show_saved_passwords(self):
        """Toggle the visibility of saved passwords."""
        # Hide saved passwords and the "No Data Available" message
        if self.show_saved:
            # Hide saved passwords
            for label in self.saved_password_labels:
                self.canvas.itemconfig(label, state='hidden')
            for button in self.saved_password_buttons:
                self.canvas.itemconfig(button, state='hidden')

            # Hide the "No Data Available" message if it exists
            for item in self.canvas.find_all():
                if self.canvas.type(item) == 'text' and "No Data Available" in self.canvas.itemcget(item, "text"):
                    self.canvas.itemconfig(item, state='hidden')

            self.show_button.config(text="Show Saved Passwords")
        else:
            # Show saved passwords
            self.refresh_saved_passwords()  # Refresh the display first
            for label in self.saved_password_labels:
                self.canvas.itemconfig(label, state='normal')
            for button in self.saved_password_buttons:
                self.canvas.itemconfig(button, state='normal')

            # Show the "No Data Available" message if there are no saved passwords
            if not self.saved_passwords:
                self.canvas.create_text(130, self.saved_passwords_margin_y, text="No Data Available", fill="black",
                                        font=('Helvetica', 12, 'italic'))

            self.show_button.config(text="Hide Saved Passwords")

        # Toggle the flag
        self.show_saved = not self.show_saved

    def toggle_more_options(self):
        """Show or hide the additional options."""
        if self.canvas.itemcget(self.save_button_window, 'state') == 'hidden':
            # Show the additional options
            self.canvas.itemconfig(self.save_button_window, state='normal')
            self.canvas.itemconfig(self.copy_button_window, state='normal')
            self.canvas.itemconfig(self.show_button_window, state='normal')
            self.more_options_button.config(text="Hide Options")
        else:
            # Hide the additional options
            self.canvas.itemconfig(self.save_button_window, state='hidden')
            self.canvas.itemconfig(self.copy_button_window, state='hidden')
            self.canvas.itemconfig(self.show_button_window, state='hidden')
            self.more_options_button.config(text="More Options")


if __name__ == "__main__":
    root = tk.Tk()
    app = PasswordGeneratorApp(root)
    root.mainloop()
